{"version":3,"sources":["assets/move/Футаж. Магическая пыль. Footage..mp4","logo.svg","assets/move/videoplayback.mp4","weather.js","App.js","serviceWorker.js","index.js","weather.module.css"],"names":["module","exports","WeatherCity","clickCity","props","clickWeater","id","tempValue","temp","Number","toFixed","className","styles","item","weatheritem","onClick","this","name","weatherDescription","weatherData","weather","main","src","icon","alt","description","temp_max","temp_min","wind","speed","React","Component","App","state","onclickWeather","z","places","zip","c","countryCode","replace","axios","get","then","res","setState","data","newplaces","map","place","index","key","video2","autoPlay","muted","loop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,6J,4ECA3CD,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,2C,qJC2C5BC,E,2MArCXC,UAAY,WACR,EAAKC,MAAMC,YAAY,EAAKD,MAAME,K,EAEtCC,UAAY,SAACC,GACT,OAASC,OAAOD,GAAQ,QAAQE,QAAQ,I,wEAIxC,OAEI,yBAAKC,UAAWC,IAAOC,MAEnB,yBAAKF,UAAWC,IAAOE,YAAaC,QAASC,KAAKb,WAC9C,8BAAOa,KAAKZ,MAAMa,OAGtB,yBAAKN,UAAWC,IAAOM,oBAClBF,KAAKZ,MAAMe,aAAe,6BACtBH,KAAKZ,MAAMe,YAAYC,QAAQ,GAAGC,KADZ,OACsBL,KAAKZ,MAAMe,YAAYF,KACpE,yBAAKK,IAAK,mCAAqCN,KAAKZ,MAAMe,YAAYC,QAAQ,GAAGG,KAAO,OACnFC,IAAKR,KAAKZ,MAAMe,YAAYM,cACjC,uCAAaT,KAAKT,UAAUS,KAAKZ,MAAMe,YAAYE,KAAKb,MAAxD,QACA,oCAAUQ,KAAKT,UAAUS,KAAKZ,MAAMe,YAAYE,KAAKK,UAArD,QACA,mCAASV,KAAKT,UAAUS,KAAKZ,MAAMe,YAAYE,KAAKM,UAApD,QACA,0CAAiBX,KAAKZ,MAAMe,YAAYS,KAAKC,MAA7C,iB,GA1BEC,IAAMC,W,0CCyDjBC,E,2MAjDXC,MAAQ,CACJd,YAAa,KACbb,IAAK,G,EAIT4B,eAAiB,SAAC5B,GAGd,IAAI6B,EAAI1B,OAAO,EAAK2B,OAAO9B,GAAI+B,KAC3BC,EAAI,EAAKF,OAAO9B,GAAIiC,YAAYC,QAAQ,gBAAW,IACvDC,IAAMC,IAAN,6DAAgEP,EAAhE,YAAqEG,EAArE,4CAAiHK,MAAK,SAAAC,GAClH,EAAKC,SAAS,CACV1B,YAAayB,EAAIE,KACjBxC,GAAIA,Q,EAShB8B,OAAS,CACL,CAACnB,KAAM,QAASoB,IAAK,SAAUE,YAAa,MAC5C,CAACtB,KAAM,SAAUoB,IAAK,SAAUE,YAAa,MAC7C,CAACtB,KAAM,mBAAoBoB,IAAK,SAAUE,YAAa,O,qHAIjD,IAAD,OACDQ,EAAY/B,KAAKoB,OAAOY,KAAI,SAACC,EAAOC,GAAR,OAC5B,kBAAC,EAAD,CAAavC,UAAU,OAAOL,GAAI4C,EAAOC,IAAKD,EACjC/B,YAAa,EAAKc,MAAM3B,KAAO4C,EAAQ,EAAKjB,MAAMd,YAAc,KAChEF,KAAMgC,EAAMhC,KACZZ,YAAa,EAAK6B,oBAEnC,OACI,yBAAKvB,UAAU,UACX,2BAAOW,IAAK8B,IAAQC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACjD,GAAG,YAC3C,yBAAKK,UAAU,OAEVoC,Q,GA7CHjB,IAAMC,WCGJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BzE,EAAOC,QAAU,CAAC,KAAO,sBAAsB,YAAc,6BAA6B,mBAAqB,uC","file":"static/js/main.ca56fd38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Футаж. Магическая пыль. Footage..485afeba.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/videoplayback.aef9109e.mp4\";","import React from 'react';\r\nimport styles from './weather.module.css';\r\n\r\n\r\nclass WeatherCity extends React.Component {\r\n\r\n    clickCity = () => {\r\n        this.props.clickWeater(this.props.id)\r\n    }\r\n    tempValue = (temp) => {\r\n        return ((Number(temp) - 273.15).toFixed(2))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className={styles.item}>\r\n\r\n                <div className={styles.weatheritem} onClick={this.clickCity}>\r\n                    <span>{this.props.name}</span>\r\n                </div>\r\n\r\n                <div className={styles.weatherDescription}>\r\n                    {this.props.weatherData && <div>\r\n                        {this.props.weatherData.weather[0].main} in {this.props.weatherData.name}\r\n                        <img src={\"http://openweathermap.org/img/w/\" + this.props.weatherData.weather[0].icon + \".png\"}\r\n                             alt={this.props.weatherData.description}/>\r\n                        <p>Current: {this.tempValue(this.props.weatherData.main.temp)}°</p>\r\n                        <p>High: {this.tempValue(this.props.weatherData.main.temp_max)}°</p>\r\n                        <p>Low: {this.tempValue(this.props.weatherData.main.temp_min)}°</p>\r\n                        <p>Wind Speed: {(this.props.weatherData.wind.speed)} mi/hr</p>\r\n\r\n                    </div>\r\n\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherCity;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherCity from \"./weather\";\nimport axios from \"axios\";\nimport video from './assets/move/videoplayback.mp4'\nimport video2 from './assets/move/Футаж. Магическая пыль. Footage..mp4'\n\n\nclass App extends React.Component {\n\n\n    state = {\n        weatherData: null,\n        id: -1\n    }\n\n\n    onclickWeather = (id) => {\n        //  debugger\n\n        let z = Number(this.places[id].zip)\n        let c = this.places[id].countryCode.replace(/['\"«»]/g, '')\n        axios.get(`http://api.openweathermap.org/data/2.5/weather?zip=${z},${c}&appid=3c93e9d5009f08a00a4ee49f25d37a2c`).then(res => {\n            this.setState({\n                weatherData: res.data,\n                id: id\n            })\n        })\n    }\n\n\n    componentDidMount() {\n    }\n\n    places = [\n        {name: \"Minsk\", zip: \"220117\", countryCode: \"by\"},\n        {name: \"Moscow\", zip: \"101000\", countryCode: \"ru\"},\n        {name: \"Saint Petersburg\", zip: \"198097\", countryCode: \"ru\"}\n    ]\n\n\n    render() {\n        let newplaces = this.places.map((place, index) => (\n            <WeatherCity className=\"item\" id={index} key={index}\n                         weatherData={this.state.id === index ? this.state.weatherData : null}\n                         name={place.name}\n                         clickWeater={this.onclickWeather}/>\n        ))\n        return (\n            <div className=\"video2\">\n                <video src={video2} autoPlay muted loop id=\"myVideo\"/>\n                <div className=\"App\">\n\n                    {newplaces}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"weather_item__3XF5N\",\"weatheritem\":\"weather_weatheritem__25Qxa\",\"weatherDescription\":\"weather_weatherDescription__2Lm_B\"};"],"sourceRoot":""}